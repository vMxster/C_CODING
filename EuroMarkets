/*
EUROMERCATI deve sviluppare un servizio centralizzato per la gestione dei propri
supermercati. Gestisce una tabella listino (vettore di strutture) in cui vengono
memorizzate le informazioni relative a: codice_prodotto, codice_fornitore, prezzo_unitario,
quantità_minima (la quantità minima di quel prodotto che deve essere presente in ogni
supermercato). La tabella deve mantenere le righe ordinate per codice_prodotto crescente
e, a parità di codice_prodotto, per codice_fornitore crescente.
I diversi supermercati devono essere memorizzati in una lista principale di strutture
collegate supermercati in cui ogni struttura deve mantenere il codice_supermercato.
Ogni supermercato deve gestire la lista dei prodotti in esso conservati tramite una lista
secondaria di strutture collegate prodotti in cui, per ogni prodotto, viene
memorizzato il codice_prodotto, il codice_fornitore, la quantità_presente nel
supermercato. Anche tale lista è ordinata per codice_prodotto crescente e, a parità di
codice_prodotto, per codice_fornitore crescente.
Definire le strutture dati necessarie a memorizzare le informazioni descritte. Inoltre,
predisporre il codice essenziale del main() per poter dichiarare le strutture.
Implementare la funzione chiudi_supermercato che elimini dalla lista principale il
supermercato il cui codice è passato come parametro alla funzione. I prodotti presenti
nella corrispondente lista collegata devono essere attribuiti a un secondo supermercato
indicato tramite parametro passato alla funzione.
Implementare poi una funzione stampa_prodotti_in_esaurimento che, dato il
codice_supermercato, stampi le informazioni dei suoi prodotti che hanno
quantità_presente inferiore alla quantità_minima prevista.
Implementare infine una funzione miglior_supermercato che individui il codice del
supermercato al cui interno è mantenuto l’insieme di prodotti con valore maggiore
 */

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct listini {
    int codice_prodotto;
    int codice_fornitore;
    int prezzo_unitario;
    int quantita_minima;
};

struct supermercati {
    int codice_supermercato;
    struct prodotto * prodotti;
    struct supermercati *next;
};

struct prodotto {
    int codice_prodotto;
    int codice_fornitore;
    int quantita_presente;
    struct prodotto *next;
};

void chiudi_supermercato (int , int , struct supermercati *);
void stampa_prodotti_in_esaurimento (int , struct supermercati *, struct listini *);
int miglior_supermercato(struct supermercati *);

int main() {

    int code_sup; struct supermercati *lista;
    struct listini *testa=(struct listini *) malloc (MAX*sizeof(struct listini));

    chiudi_supermercato(98,56, lista);
    stampa_prodotti_in_esaurimento(56, lista, testa);
    code_sup = miglior_supermercato(lista);
    return 0;
}

void chiudi_supermercato (int code_sup_del, int code_sup_add, struct supermercati *lista) {
    struct supermercati *temp = lista;
    struct supermercati *prev = temp;
    struct supermercati *appoggio = NULL;
    struct prodotto *provv = NULL;
    char controllo=0;

    while (temp->next != NULL) {

        if (temp->codice_supermercato == code_sup_del) {
            controllo++;
            break;
        }

        prev = temp;
        temp = temp->next;
    }

    if (controllo==0) {
        printf("Supermercato da Rimuovere non trovato");
    }

    appoggio= temp;
    prev->next = temp->next;
    temp->next = NULL;
    prev = NULL;
    free(temp);
    controllo--;
    temp = lista;

    while(temp->next != NULL) {

        if (temp->codice_supermercato == code_sup_add) {
            provv = temp->prodotti;
            while (provv->next != NULL) {
                provv=provv->next;
            }
            provv->next=appoggio->prodotti;
            free(appoggio);
            controllo++;
            break;
        }
        temp=temp->next;
    }

    if (controllo==0) {
        printf("Supermercato da Aggiungere non trovato");
    }
}

void stampa_prodotti_in_esaurimento (int code_sup, struct supermercati *lista, struct listini *testa) {

    struct prodotto *provv = NULL;
    struct supermercati *temp = lista;
    struct listini *ltemp = testa;
    char controllo=0;

    while (temp!=NULL) {
        if (temp->codice_supermercato==code_sup) {
            controllo++;
            break;
        }
        temp=temp->next;
    }

    if (controllo==0) {
        printf("Supermercato non trovato");
    }
    controllo--;
    provv=temp->prodotti;

    while(provv!=NULL) {

        if (provv->quantita_presente<ltemp->quantita_minima) {
            printf("%d Carente", ltemp->codice_prodotto);
            controllo++;
        }

        provv=provv->next;
    }
    if (controllo==0) {
        printf("Nessun Prodotto Carente");
    }
}

int miglior_supermercato(struct supermercati *lista) {
    struct supermercati *temp = lista;
    struct prodotto *provv = NULL;
    int best_sup=0;
    int best_tot=0;
    int temp_tot=0;

    while(temp!=NULL){
        provv=temp->prodotti;
        while(provv!=NULL) {
            temp_tot+= provv->quantita_presente;
            provv=provv->next;
        }
        if(best_tot<temp_tot) {
            best_sup=temp->codice_supermercato;
        }
        temp=temp->next;
    }

    return best_sup;
}
